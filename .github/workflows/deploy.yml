name: Deploy Flask App to Dokploy

on:
  push:
    branches: [main]

env:
  APP_NAME: "flask-app"  # 自定义应用名称
  DOCKER_REGISTRY: "docker.io"  # 使用 Docker Hub

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 步骤 1: 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 步骤 2: 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 步骤 3: 安装依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 步骤 4: 登录 Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 步骤 5: 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 步骤 6: 触发 Dokploy 部署
      - name: Deploy to Dokploy
        run: |
          curl -X POST "${{ secrets.DOKPLOY_SERVER_URL }}/api/applications/${{ secrets.DOKPLOY_APP_ID }}/deploy" \
            -H "Authorization: Bearer ${{ secrets.DOKPLOY_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"image": "${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}"}'

      # 步骤 7: 健康检查
      - name: Health Check
        run: |
          echo "等待应用启动..."
          sleep 20
          curl -sSf ${{ secrets.APP_URL }} || exit 1