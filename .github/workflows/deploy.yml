name: Deploy Flask App to Dokploy

on:
  push:
    branches: [main]  # 只在 main 分支推送时触发

env:
  APP_NAME: "flask-app"  # 自定义应用名称
  DOCKER_IMAGE: "works/${{ env.APP_NAME }}"  # Docker 镜像名称
  DOKPLOY_APP_ID: "works-works-woyavz"  # Dokploy 中的应用 ID

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 步骤 1: 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 步骤 2: 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'  # 使用 Flask 兼容的 Python 版本

      # 步骤 3: 安装依赖并测试 (可选)
      - name: Install dependencies and test
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # 添加测试命令，例如:
          # pytest tests/

      # 步骤 4: 构建 Docker 镜像
      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
          docker tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} ${{ env.DOCKER_IMAGE }}:latest

      # 步骤 5: 登录 Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 步骤 6: 推送 Docker 镜像
      - name: Push Docker image
        run: |
          docker push ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          docker push ${{ env.DOCKER_IMAGE }}:latest

      # 步骤 7: 触发 Dokploy 部署
      - name: Deploy to Dokploy
        run: |
          curl -X POST "${{ secrets.DOKPLOY_SERVER_URL }}/api/applications/${{ env.DOKPLOY_APP_ID }}/deploy" \
            -H "Authorization: Bearer ${{ secrets.DOKPLOY_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"image": "${{ env.DOCKER_IMAGE }}:${{ github.sha }}"}'

      # 步骤 8: 健康检查 (可选)
      - name: Verify deployment
        run: |
          echo "等待 30 秒让应用启动..."
          sleep 30
          curl -I ${{ secrets.APP_URL }}  # 设置你的应用访问 URL